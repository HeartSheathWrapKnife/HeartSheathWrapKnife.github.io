<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac安装npm node.js环境]]></title>
    <url>%2F2018%2F09%2F10%2FMac%E5%AE%89%E8%A3%85npm-node-js%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[从零开始的个人博客，next添加Valine评论功能]]></title>
    <url>%2F2018%2F09%2F06%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8Cnext%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[前言注意next5.14版本 由于该版本中已经集成了Valine，我就简要的说一下流程： leancloud 相关keyleancloud，没有申请应用的朋友可前往leanCloud官网 注册并申请一个应用，并在应用设置里的安全中心设置好安全域名由于我之前配置统计的时候我已经注册过一个应用了，于是直接进入下一步。 配置valine打开主题配置文件（即next主题中的_config.yml）找到valine的配置,并填上对应的信息。12345678910valine:enable: trueappid: xxxxxx # 填写 leancloud appidappkey: xxxxxx # 填写 leancloud  appkeynotify: false # verify: false # Verification codeplaceholder: 各位道友，请举手发言 # comment box placeholderavatar: mm # gravatar styleguest_info: nick,mail,link # custom comment headerpageSize: 10 # pagination size hexo重新上传在项目根目录下1$ hexo g 1$ hexo d enjoy简单粗暴，嘿嘿嘿。 参考valine官方文档]]></content>
  </entry>
  <entry>
    <title><![CDATA[从零开始的个人博客，更换next主题及配置]]></title>
    <url>%2F2018%2F09%2F05%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%9B%B4%E6%8D%A2next%E4%B8%BB%E9%A2%98%E5%8F%8A%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[ready在上一篇博客从零开始的个人博客，hexo+githPages搭建 中，我们以及完成了博客的基础功能搭建，接下便是功能的扩充以及美化。我选择的是NexT主题，理由：简洁易用（其实就是菜），好了废话不多说，下面开始正题。hexo官方主题展示 安装NexT主题本文使用的版本为5.1.4版本github链接解压所下载的压缩包至站点的 themes 目录下（也可在使用git clone命令添加到工程的themes里）， 并将 解压后的文件夹名称（hexo-theme-next-5.1.4）更改为 next。 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 完成上述步骤后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next并保存。1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next cd 到工程目录下：123$ hexo clean #切换主题后，防止出问题，clean一下$ hexo g #重新生成静态文件$ hexo d #将public中有改动的文件上传 打开 xxx.github.io 或者是 已绑定的域名 （或者使用hexo s 访问本地站点） 查看主题是否生效。 更换NexT主题风格5.1.4版本提供了三种风格可供选择,在 主题配置文件 中，搜索 scheme 关键字，可以进行修改,我比较喜欢mist风格，大家随意选择。12345# Schemes# scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini 当然修改主题风格后需要重新上传才会生效，不要忘记了哦。 详细设置基本信息修改修改标题、作者、描述 等。12345678# Sitetitle: lostifor的博客subtitle:description: 编程的乐趣？ 人类的成就感来源于创造或者毁灭。keywords:author: 李佳育language: zh-Hanstimezone: 语言编辑 站点配置文件,将language修改为简体中文（注意本文使用的是5.1.4版本，6.0以上版本为zh-cn）,配置如下：1language: zh-Hans 菜单栏在 主题配置文件中 编辑菜单栏，以及对于图标的显示：123456789menu: home: / || home categories: /categories/ || th about: /about/ || user tags: /tags/ || tags archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeat ||号后面是图标的名字，所有图标由Font Awesome提供。重新上传后的效果如下： 修改头像编辑 主题配置文件， 修改字段 avatar， 值设置成头像的链接地址。可以直接使用上传的图片如：http://xxx.avatar.png。也可以放置在 source/images/ 目录下，配置为：avatar: /images/avatar.png我使用的第二种方法。（毕竟图床不稳） 其他修改其他相关的配置，请查阅next官方文档 三方集成所有三方选择均秉承简单易用的规则选用（真的菜。。。） 统计功能 leanCloud为NexT主题添加文章阅读量统计功能 搜索功能 Local Search添加百度/谷歌/本地 自定义站点内容搜索（简单粗暴）安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：1$ npm install hexo-generator-searchdb --save 编辑 站点配置文件，新增以下内容到任意位置：12345search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能：123# Local searchlocal_search: enable: true 添加回复功能请查阅博客：从零开始的个人博客，next添加Valine评论功能 enjoy效果展示：李佳育的个人博客]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
        <tag>NexT.mist</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始的个人博客，hexo+githubPages快速搭建]]></title>
    <url>%2F2018%2F09%2F05%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8Chexo-githubPages%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[说明域名买了n久了，说好的搭建自己的博客，在历时大半年后，终于开始搭建了。首先本人作为一个开发者，本来应该全部都自己写的，但是最后选择了方便的hexo+githubPages来搭建自己的博客（说这么多，其实就是自己懒和菜），话不多说下面就开始正题。 开始之前在开始搭建博客之前，请确认：1.github账号，这个就不多说了，程序员必备2.安装node.js npm 看这里 建立Git仓库新建一个名为 用户名.github.io的仓库，必须使用用户名，比如：我的用户名是xxx 那么仓库名为 xxx.github.io，然后我们就可以直接访问 xxx.github.io注意：每个账户只能建立一个这样的仓库。我们可以给仓库绑定域名（如果有的话），当然也可以直接使用xxx.github.io。 配置SSH key查看是否存在已有的SSHkey1$ cd ~/.ssh （ps：我用原来的SSHkey没能通过验证，后来格式化了该文件夹后重新生成的SSHkey）如果没有存在的SSHkey，则：1$ ssh-keygen -t rsa -C "your email" 确认后，前往文件 _.ssh\id_rsa.pub_ 里面的内容将会在Git的SSHkey设置里面用到。打开github设置，选中SSH and GPG keys，点击 new SSHkey按钮在title中填写任意内容。在key中粘贴，.ssh\id_rsa.pub里面的所有内容，保存。 测试SSHkey打开终端，输入:1$ ssh -T git@github.com 如果提示： Are you sure you want to continue connecting (yes/no)? 输入yes Hi HeartSheathWrapKnife! You’ve successfully authenticated, but GitHub does not provide shell access. 注意：如果验证一直通不过，提示 Permission denied，则可能本机SSH环境SSHkey添加错误，或者失效，重新添加即可。 hexo说说我对hexo粗浅的理解，因为github pages存放的都是静态文件，不可能手动对本地文件进行一个一个的更改，所以由hexo统一管理所有md文件，由hexo通过source文件中的本地md以及图片等设置，生成成对应的静态网页（存放在public文件中，也就是我们的xxx.github.io的实际内容），然后再将有改动的静态页面提交到github。hexo官网hexogithub链接 安装hexo确认所有需要的环境（git，node.js ,npm）均已安装后1$ npm install -g hexo-cli 安装完成后，在桌面或者任意指定目录，建立hexo项目文件夹。我一般项目都建立在桌面。比如/Users/lijiayu/Desktop/LostiforHexo12$ cd 你新建的文件夹目录$ npm install 命令执行完毕后，该文件夹大概目录如下。 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 然后，生成静态文件。1$ hexo g #生成静态文件 1$ hexo s #本地预览 1$ hexo d #上传到github仓库 可以选择本地预览，开启本地预览后，在浏览器访问http://localhost:4000 打开后显示默认主题的博客，以及一篇hello world 的文章。这个时候我们博客的骨架就基本搭建完成了。 绑定域名绑定域名分2种情况：带www和不带www的。域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问 到项目目录/source 里创建一个CNAME，并在里面写下你的域名如：lostifor.com。保存。 支持https，获得小绿锁GitHub Pages已经开放了自定义域名支持HTTPS,只需要在repositorys设置中开启Enforce HTTPS的选项即可。 接下来就是给博客更换主题，添加功能，以及美化等工作。从零开始的个人博客，更换next主题及配置]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>githubPages</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
